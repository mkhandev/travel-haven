generator client {
  provider = "prisma-client-js"
  //output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id           String     @id @default(uuid()) @db.Uuid
  clerkId      String     @unique
  firstName    String
  lastName     String
  userName     String
  email        String
  profileImage String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Property     Property[]
  Review       Review[]
  Favorite     Favorite[]
}

model Property {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  tagline     String
  category    String
  image       String
  country     String
  description String
  price       Int
  guests      Int
  bedrooms    Int
  beds        Int
  baths       Int
  amenities   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  profile     Profile    @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId   String
  Review      Review[]
  Favorite    Favorite[]
}

model Review {
  id         String   @id @default(uuid()) @db.Uuid
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId  String   @db.Uuid
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String   @db.Uuid
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String

  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String   @db.Uuid
}
